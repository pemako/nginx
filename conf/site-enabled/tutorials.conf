server {
  listen 7160;

  location /html {
    default_type text/html;
    root html;
  }

  location /foo {
    set $a hello;
    #echo_exec /bar;
    rewrite ^ /bar;
  }

  location /bar {
    echo "a = [$a]";
  }

  location /test {
    echo "uri = $uri";
    echo "request_uri = $request_uri";
    echo "args = $args";
    echo "name: $arg_name";
    echo "class: $arg_class";

    set_unescape_uri $name $arg_name;
    set_unescape_uri $class $arg_class;

    echo "name: $name";
    echo "class: $class";
  }

  location /test2 {
    content_by_lua '
      if ngx.var.arg_name == nil then
        ngx.say("name: missing")
      else
        ngx.say("name = [", ngx.var.arg_name, "]");
      end

      if ngx.var.cookie_user == nil then
        ngx.say("cookie user: missing")
      else
        ngx.say("cookie user : [", ngx.var.cookie_user, "]")
      end
    ';
  }

  location /test3 {
    set $a 32;
    echo $a;

    set $a 56;
    echo $a;
  }

  location /hello {
    default_type text/plain;
    content_by_lua_block {
      local mako = require "mako"
      mako.greet("a Lua module")
    }
  }

  location /uuid {
    content_by_lua_block {
      local mako = require "mako"
      ngx.say(mako.uuid())
    }
  }
  
  location /mysql {
    lua_code_cache on;
    content_by_lua_file "lualib/mysql.lua";
  }

  # 注意 这一行必须设置否则下面的 location 无法获取不到数据
  resolver 8.8.8.8;

  location /baidu {
    content_by_lua_block {
      local http = require "resty.http"
      local httpc = http.new()
      local res, err = httpc:request_uri("http://www.baidu.com")
      if res.status == ngx.HTTP_OK then
        ngx.say(res.body)
      else
        ngx.exit(res.status)
      end
    }
  }

  location /request {
    content_by_lua_block {
      local req = require "mako"
      req.request()
    }
  }

  location /cookie {
    content_by_lua_block {
      local ck = require "resty.cookie"
      local cookie, err = ck:new()
      if not cookie then
        ngx.log(ngx.ERR, err)
        return
      end

      -- get single cookie
      local field, err = cookie:get("io")
      if not field then
        ngx.log(ngx.ERR, err)
        return
      end
      ngx.say("lang", " => ", field)

      -- get all cookies
      local fields, err = cookie:get_all()
      if not fields then
        ngx.log(ngx.ERR, err)
        return
      end

      for k, v in pairs(fields) do
        ngx.say(k, " => ", v)
      end

      -- set one cookie
      local ok, err = cookie:set({
        key = "Name", value = "Bob", path = "/",
        domain = "example.com", secure = true, httponly = true,
        expires = "Wed, 09 Jun 2021 10:18:14 GMT", max_age = 50,
        samesite = "Strict", extension = "a4334aebaec"
      })
      if not ok then
        ngx.log(ngx.ERR, err)
        return
      end

      -- set another cookie, both cookies will appear in HTTP response
      local ok, err = cookie:set({
        key = "Age", value = "20",
      })
      if not ok then
        ngx.log(ngx.ERR, err)
        return
      end
    }
  }

  location /cjson {
    content_by_lua_block {
      local cjson = require "cjson"
      local t = { "hello", "world" }
      setmetatable(t, cjson.array_mt)
      cjson.encode(t)
    }
  }

  location /lua/v1 {
    content_by_lua_block {
      local cjson = require "cjson"
      local jwt = require "resty.jwt"

      local jwt_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9eyJmb28iOiJiYXIifQVAoRL1IU0nOguxURF2ZcKR0SGKE1gCbqwyh8u2MLAyY"
      local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token)
      ngx.say(cjson.encode(jwt_obj))
    }     
  }

  location /lua/sign {
    content_by_lua_block {
      local csjon = require "cjson"
      local jwt = require "resty.jwt"

      local jwt_token = jwt:sign(
        "lua-resty-jwt",
        {
          header={typ="JWT", alg="HS256"},
          payload={sub="lua-resty-jwt", iss="lua-resty-jwt", exp=ngx.time() + 3600}
        }
      )
      ngx.say(jwt_token)
    }
  }

  location /lua/stream {
    default_type applicaiton/octet-stream;

    content_by_lua_block {
      for i = 1, 4 do
        ngx.say("hello", i);
        ngx.flush(true);
        ngx.sleep(1);
      end
    }
  }

  location /lua/baidu {
    internal;
    proxy_pass http://www.baidu.com/s?wd=$arg_query;
  }

  location /lua/test {
    content_by_lua_block {
      local res = ngx.location.capture("/lua/baidu", {args={query="mako"}})
      if res.status ~= 200 then
        ngx.say("failed to request baidu: ", res.status, ":", res.body)
        return
      end
      ngx.say(res.status)
    }
  }

	location ~ /api/([-_a-zA-Z0-9/]+) {
		access_by_lua_file  lualib/access_check.lua;
		content_by_lua_file $1.lua;
	}

}
